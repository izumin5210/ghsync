package cmd

import (
	"context"
	"strconv"
	"strings"
	"sync"

	"github.com/google/go-github/github"
	"github.com/izumin5210/ghsync"
	"github.com/spf13/afero"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
	"go.uber.org/zap"
)

func newCleanCmd() *cobra.Command {
	fs := afero.NewOsFs()
	viper := viper.New()
	viper.SetFs(fs)

	cmd := &cobra.Command{
		Use:  "clean <owner>/<repo>",
		Args: cobra.MinimumNArgs(1),
		RunE: func(_ *cobra.Command, args []string) error {
			ctx := context.Background()
			origin, err := ghsync.BuildMetadata(ctx)
			if err != nil {
				return err
			}

			ownerAndRepo := strings.SplitN(args[0], "/", 2)
			owner, repo := ownerAndRepo[0], ownerAndRepo[1]

			ts := tokenSource()
			hc := httpClient(ctx, ts)
			gc := githubClient(hc)

			pulls, _, err := gc.PullRequests.List(ctx, owner, repo, &github.PullRequestListOptions{
				State: "open",
			})
			if err != nil {
				return err
			}

			var wg sync.WaitGroup

			prefix := strings.Join([]string{"ghsync", origin.Owner, origin.Repo, "pull"}, "/") + "/"
			for _, pull := range pulls {
				originPullNum, err := strconv.Atoi(strings.TrimPrefix(pull.GetHead().GetRef(), prefix))
				if err != nil {
					zap.L().Debug("this  pull request was not generated by ghsync", zap.String("url", pull.GetHTMLURL()), zap.String("branch", pull.GetHead().GetRef()))
					continue
				}

				pull := pull

				wg.Add(1)
				go func() {
					defer wg.Done()

					originPull, _, err := gc.PullRequests.Get(ctx, origin.Owner, origin.Repo, originPullNum)
					if err != nil {
						zap.L().Warn("failed to get an origin pull request", zap.Error(err))
						return
					}

					if originPull.GetState() == "open" {
						zap.L().Debug("origin pull request still open", zap.String("url", originPull.GetHTMLURL()))
						return
					}

					_, _, err = gc.PullRequests.Edit(ctx, owner, repo, pull.GetNumber(), &github.PullRequest{
						State: github.String("closed"),
					})
					if err != nil {
						zap.L().Warn("failed to close a pull request", zap.Error(err), zap.String("url", pull.GetHTMLURL()))
						return
					}
					zap.L().Warn("a pull request was closed", zap.String("url", pull.GetHTMLURL()))

					_, err = gc.Git.DeleteRef(ctx, owner, repo, "heads/"+pull.GetHead().GetRef())
					if err != nil {
						zap.L().Warn("failed to delete a branch", zap.Error(err), zap.String("branch", pull.GetHead().GetRef()))
						return
					}
					zap.L().Warn("a branch was deleted", zap.String("branch", pull.GetHead().GetRef()))
				}()
			}

			wg.Wait()

			return nil
		},
	}

	return cmd
}
